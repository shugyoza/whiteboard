/* Leetcode
You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

 

Example 1:

Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].
Example 2:

Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].
Example 3:

Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].
 

Constraints:

1 <= digits.length <= 100
0 <= digits[i] <= 9
digits does not contain any leading 0's.

////////

I: sorted array representing a num;
O: array of digits representing 'input num' + 1;
C:
Q:
- what if arr is not an arr;
- what if num is not a num;
- what if arr.length == 0;
- do we have to do it in the same array or not

P:
- we can join O(n), add 1, then split O(n), but runtime would be O(2n), space O(n);
*/

/* NOT works
var plusOne = function(digits) {
  let numS = digits.join('');	// '123'
  let resNum = 1 + 1*numS;	// 1 + 1*'19' = 20
  let resS = '' + resNum;	// '20'
  let resA = resS.split('');		// ['2','0']
  for (let i = 0; i < resA.length; i++) { // i=1 < 2 T
    resA[i] = 1 * resA[i];		  // 1*'0' = 0
  }
  return resS; // [2, 0]
}
*/

/* Works, but fails if the string is no longer in a Number range, but a BigInt,
but BigInt always ends with n. We cannot add BigInt with Number, error thrown

let input = [6,1,4,5,3,9,0,1,9,5,1,8,6,7,0,5,5,4,3]
let s = input.join('');
let smz = Number(s)
let smzB = BigInt(s)
console.log(s)
console.log(smz)
console.log(smzB + 1)

var plusOne = function(digits) {
  let resA = [];
  let numS = digits.join('');	// '19'
  let resNum = numS - 0 + 1;	// '19' - 0 + 1 = 20
  let resS = '' + resNum;	// '20'
  for (let i = 0; i < resS.length; i++) {
      resA.push(resS[i] - 0);
  }
    return resA; // [2, 0]
}
*/

/*
we have to check arr[0], if it's 9, we have to add length array for resize
*/
/*
Runtime: 72 ms, faster than 81.93% of JavaScript online submissions for Plus One.
Memory Usage: 39 MB, less than 25.30% of JavaScript online submissions for Plus One.
*/
var plusOne = function(digits) {
  for (let i = digits.length - 1; i >= 0; i--) {	//i=0 >= 0 T,
    if (digits[i] < 9) {				//n=9 < 9 F
      digits[i] += 1;					//2+1 = 3
      return digits;					// [0,1,3]
    }
    else if (digits[i] === 9) {				//9=9 T 
      digits[i] = 0;					//[0,0] 
      // if we don't have to change length
      if (digits[i - 1] < 9) {				//undefined<9 F 
        digits[i - 1] += 1;				//2+1=3
        return digits;					//[3,0] DONE
      }
      else if (i - 1 === -1) {				//0-1=-1 T
        for (let j = digits.length; j >= 0; j--) {	//j=0 >= 0 T
          if (j === 0) {				//T
            digits[j] = 1;				//0=>1 [1,0,0]
	    return digits;				// DONE
          }
          else {
	    digits[j] = digits[j - 1];			//0 => 0; [0,0,0]
          }
        }
      }
    }
  }
}

/*
Runtime: 124 ms, faster than 11.03% of JavaScript online submissions for Plus One.
Memory Usage: 38.5 MB, less than 76.67% of JavaScript online submissions for Plus One.

var plusOne = function(digits) {
  for (let i = digits.length - 1; i >= 0; i--) {	//i=0 >= 0 T,
    if (digits[i] < 9) {				//n=9 < 9 F
      digits[i] += 1;					//2+1 = 3
      return digits;					// [0,1,3]
    }
    else if (digits[i] === 9) {				//9=9 T 
      digits[i] = 0;					//[0,0] 
      // if we don't have to change length
      if (digits[i - 1] < 9) {				//undefined<9 F 
        digits[i - 1] += 1;				//2+1=3
        return digits;					//[3,0] DONE
      }
      else if (i - 1 === -1) {				//0-1=-1 T
        digits.unshift(1);
        return digits;
      }
    }
  }
}
*/

/*
 0 1 2 = 3
[0,1,2]

 0 1 = 2 
[2,9]

 0 1 = 2
[9,9]
*/