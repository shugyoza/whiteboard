20220414. 6:16.73 without explaining
Runtime: 116 ms, faster than 78.62% of JavaScript online submissions for Product of Array Except Self.
Memory Usage: 55.4 MB, less than 34.40% of JavaScript online submissions for Product of Array Except Sel

function productExceptSelf(nums) {
  let res = new Array(nums.length).fill(1);
  let sum = 1;
  for (let i = 1; i < res.length; i++) {
    sum = sum * nums[i-1];
    res[i] = res[i] * sum;
  }
  sum = 1;
  for (let j = res.length - 2; j >= 0; j--) {
    sum = sum * nums[j+1];
    res[j] = res[j] * sum;
  }
  return res;
}




























/* LC: https://leetcode.com/problems/product-of-array-except-self/submissions/
20220323.

Runtime: 137 ms, faster than 61.78% of JavaScript online submissions for Product of Array Except Self.
Memory Usage: 56 MB, less than 23.35% of JavaScript online submissions for Product of Array Except Self.  

res = [2,3,8,3]

     k
     0 1 2 3 = 4
i = [1,2,3,4]
o = [24,12,8,6]
*/
/* DOES NOT WORK
function productExceptSelf(nums) {
  const res = [];
  for (let i = 0; i < nums.length; i++) {
    res.push(1);
  }
  for (let j = 1; j < nums.length; j++) {
    let n = nums[j];
    res[j-1] = res[j-1] * n;
  }
  for (let k = nums.length - 2; k >= 0; k--) {
    let z = nums[k];
    res[k+1] = res[k+1] * z;
  }
  return res;
} */

function productExceptSelf(nums) {
  const res = [];
  let tmp = 1;
  for (let i = 0; i < nums.length; i++) {
    let a = nums[i];
    res.push(tmp);
    tmp = tmp * a;
  }
  tmp = 1;
  for (let j = nums.length - 1; j >= 0; j--) {
    let b = nums[j];
    res[j] = res[j] * tmp;
    tmp = tmp * b;
  }
  return res;
}