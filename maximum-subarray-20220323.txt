/* LC: https://leetcode.com/problems/maximum-subarray/submissions/
20220323 25:35

Runtime: 88 ms, faster than 81.96% of JavaScript online submissions for Maximum Subarray.
Memory Usage: 50.7 MB, less than 30.33% of JavaScript online submissions for Maximum Subarray.

I: arr
O: int

                     i
  0 1  2 3  4 5 6  7 8 = 9
[-2,1,-3,4,-1,2,1,-5,4]
         ^
*/

/* DOES NOT WORK. we have to compare the max sum last.
function maxSubArray(nums) {
  let max = nums[0]
  let sum = nums[0];				// sum = 1
  for (let i = 1; i < nums.length; i++) {	// i = 8 < 9 T 
    let n = nums[i];				// n = 4
    sum = sum + n;				// sum = 5
    max = Math.max(max, sum)			// max = 6
    sum = Math.max(sum, n);  			// 5 
  }
  return max;
} */

function maxSubArray(nums) {
  let max = nums[0]
  let sum = nums[0];				// sum = 1
  for (let i = 1; i < nums.length; i++) {	// i = 8 < 9 T 
    let n = nums[i];				// n = 4
    sum = sum + n;				// sum = 5
    sum = Math.max(sum, n);  			// 5 
    max = Math.max(max, sum)			// max = 6
  }
  return max;
}