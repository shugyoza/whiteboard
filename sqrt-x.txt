/* Leetcode
Given a non-negative integer x, compute and return the square root of x.

Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.

Note: You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.

 

Example 1:

Input: x = 4
Output: 2
Example 2:

Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.
 

Constraints:

0 <= x <= 231 - 1


I: a positive int
O: a positive int, sqrt of I;
C: 
- no method
- trailing decimals must be truncated;
Q:
- what if I is not a typeof num;
- what if I is negative
P:
- Iterate through, whether from zero to inputN or the other way around
- while checking whether iterateN ** = inputN;
Time O(n), space O(1);
*/

// works, but not fast enough
var mySqrt = function(x) {
  if (x === 0) return x;
  if (typeof x !== 'number') return null;
  for (let i = Math.ceil(x / 2); i > 0; i--) {		// 1 > 0 T
    if (i * i === x) return i				// 1*1=1 == 2 F return 3
    if (i * i > x && (i-1) * (i-1) < x) return i-1;	// 1>2 F && 0*0=0<2 T F return 2
  }
  return 1;
}

var mySqrt = function(x) {
  if (typeof x !== 'number') return null;
  let start = 1;							// sqrt is always greater than 1, because 1*1=1
  let end = Math.floor(x / 2) + 1;			// sqrt is never above half, but for a valid range, add 1. 2*2=4
  while (start <= end) {					
    let mid = Math.floor((start+end)/2);	
    if (mid * mid === x) return mid;		
    if (mid * mid < x) start = mid + 1;		
    else end = mid - 1;						
  }
    return end;
}

/* does not work
var mySqrt = function(x) {
  if (Math.floor(x) <= 1) return x;		
  if (typeof x !== 'number') return null;
  let start = 2;							// 2
  let end = Math.floor(x/2);						// 2
  let mid = Math.floor((start+end)/2);					// 2+2/2=2
  while (start < end + 1) {						// 2 <= 2 => T
    if (start === end) return start;
    if (mid * mid === x) return mid;					// 2** = 4 === 5 => F 
    if (mid * mid > x && (mid-1) * (mid-1) < x) return mid - 1;		// 2** = 4 > 121 => F && 30** = 4 < 8 F => F
    if (mid * mid < x) start = mid;					// 2** = 4  < 121 => T => start = 10
    else end = mid;							// end = 12
  }
}
*/


// I=4, start from 2, which is 1/2 * I toward 0;
// because 1/2 100 is 50, while sqrt of 100 is only 1
// 5
// 9 
// 8
// 4
// 2
// 121 61 60** 3600 30** 900, 15** 225, 7** 49 (7+4)** 121
// 121 61           31        16        8       7    