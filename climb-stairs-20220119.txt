/* Leetcode
You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45

////////

I: a N;
O: a N;
C: 
- what if N is not a N
P:

*/
/*
Runtime: 68 ms, faster than 89.63% of JavaScript online submissions for Climbing Stairs.
Memory Usage: 38.8 MB, less than 26.70% of JavaScript online submissions for Climbing Stairs.

var climbStairs = function(n) {
  let fib = [1, 1];				// [1,1,2,3]
  for (let i = fib.length; i <= n; i++) {	// i=3 <= 3 T
    fib[i] = fib[i-1] + fib[i-2];		//fib[3] = 3
  }
  return fib[n];			        //3
}
*/

/*
01/19/2022 12:24	Accepted	60 ms	38.9 MB	javascript
*/

var climbStairs = function(n) {
  let f = {'0': 1, '1': 1};		// {'4':5, '5':8}
  for (let i = 2; i <= n; i++) {	// i=5 <= 5
    f[i] = f[i-1] + f[i-2];		// f[5] = f[4] + f[3]
    delete f[i-2];			// del
  }
  return f[n]
}
// 5